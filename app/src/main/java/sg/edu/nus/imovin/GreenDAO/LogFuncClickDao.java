package sg.edu.nus.imovin.GreenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG_FUNC_CLICK".
*/
public class LogFuncClickDao extends AbstractDao<LogFuncClick, Long> {

    public static final String TABLENAME = "LOG_FUNC_CLICK";

    /**
     * Properties of entity LogFuncClick.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecordDateYear = new Property(1, int.class, "RecordDateYear", false, "RECORD_DATE_YEAR");
        public final static Property RecordDateMonth = new Property(2, int.class, "RecordDateMonth", false, "RECORD_DATE_MONTH");
        public final static Property RecordDateDay = new Property(3, int.class, "RecordDateDay", false, "RECORD_DATE_DAY");
        public final static Property UpdateFlag = new Property(4, int.class, "UpdateFlag", false, "UPDATE_FLAG");
        public final static Property HomeCount = new Property(5, int.class, "HomeCount", false, "HOME_COUNT");
        public final static Property ChallengeCount = new Property(6, int.class, "ChallengeCount", false, "CHALLENGE_COUNT");
        public final static Property LibraryCount = new Property(7, int.class, "LibraryCount", false, "LIBRARY_COUNT");
        public final static Property SocialCount = new Property(8, int.class, "SocialCount", false, "SOCIAL_COUNT");
        public final static Property ForumCount = new Property(9, int.class, "ForumCount", false, "FORUM_COUNT");
        public final static Property MonitorCount = new Property(10, int.class, "MonitorCount", false, "MONITOR_COUNT");
        public final static Property GoalCount = new Property(11, int.class, "GoalCount", false, "GOAL_COUNT");
    }


    public LogFuncClickDao(DaoConfig config) {
        super(config);
    }
    
    public LogFuncClickDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_FUNC_CLICK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_DATE_YEAR\" INTEGER NOT NULL ," + // 1: RecordDateYear
                "\"RECORD_DATE_MONTH\" INTEGER NOT NULL ," + // 2: RecordDateMonth
                "\"RECORD_DATE_DAY\" INTEGER NOT NULL ," + // 3: RecordDateDay
                "\"UPDATE_FLAG\" INTEGER NOT NULL ," + // 4: UpdateFlag
                "\"HOME_COUNT\" INTEGER NOT NULL ," + // 5: HomeCount
                "\"CHALLENGE_COUNT\" INTEGER NOT NULL ," + // 6: ChallengeCount
                "\"LIBRARY_COUNT\" INTEGER NOT NULL ," + // 7: LibraryCount
                "\"SOCIAL_COUNT\" INTEGER NOT NULL ," + // 8: SocialCount
                "\"FORUM_COUNT\" INTEGER NOT NULL ," + // 9: ForumCount
                "\"MONITOR_COUNT\" INTEGER NOT NULL ," + // 10: MonitorCount
                "\"GOAL_COUNT\" INTEGER NOT NULL );"); // 11: GoalCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_FUNC_CLICK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogFuncClick entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRecordDateYear());
        stmt.bindLong(3, entity.getRecordDateMonth());
        stmt.bindLong(4, entity.getRecordDateDay());
        stmt.bindLong(5, entity.getUpdateFlag());
        stmt.bindLong(6, entity.getHomeCount());
        stmt.bindLong(7, entity.getChallengeCount());
        stmt.bindLong(8, entity.getLibraryCount());
        stmt.bindLong(9, entity.getSocialCount());
        stmt.bindLong(10, entity.getForumCount());
        stmt.bindLong(11, entity.getMonitorCount());
        stmt.bindLong(12, entity.getGoalCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogFuncClick entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRecordDateYear());
        stmt.bindLong(3, entity.getRecordDateMonth());
        stmt.bindLong(4, entity.getRecordDateDay());
        stmt.bindLong(5, entity.getUpdateFlag());
        stmt.bindLong(6, entity.getHomeCount());
        stmt.bindLong(7, entity.getChallengeCount());
        stmt.bindLong(8, entity.getLibraryCount());
        stmt.bindLong(9, entity.getSocialCount());
        stmt.bindLong(10, entity.getForumCount());
        stmt.bindLong(11, entity.getMonitorCount());
        stmt.bindLong(12, entity.getGoalCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LogFuncClick readEntity(Cursor cursor, int offset) {
        LogFuncClick entity = new LogFuncClick( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // RecordDateYear
            cursor.getInt(offset + 2), // RecordDateMonth
            cursor.getInt(offset + 3), // RecordDateDay
            cursor.getInt(offset + 4), // UpdateFlag
            cursor.getInt(offset + 5), // HomeCount
            cursor.getInt(offset + 6), // ChallengeCount
            cursor.getInt(offset + 7), // LibraryCount
            cursor.getInt(offset + 8), // SocialCount
            cursor.getInt(offset + 9), // ForumCount
            cursor.getInt(offset + 10), // MonitorCount
            cursor.getInt(offset + 11) // GoalCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogFuncClick entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordDateYear(cursor.getInt(offset + 1));
        entity.setRecordDateMonth(cursor.getInt(offset + 2));
        entity.setRecordDateDay(cursor.getInt(offset + 3));
        entity.setUpdateFlag(cursor.getInt(offset + 4));
        entity.setHomeCount(cursor.getInt(offset + 5));
        entity.setChallengeCount(cursor.getInt(offset + 6));
        entity.setLibraryCount(cursor.getInt(offset + 7));
        entity.setSocialCount(cursor.getInt(offset + 8));
        entity.setForumCount(cursor.getInt(offset + 9));
        entity.setMonitorCount(cursor.getInt(offset + 10));
        entity.setGoalCount(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LogFuncClick entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LogFuncClick entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogFuncClick entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
